pipeline {
  agent any
  parameters {
    string(name: 'API_URL')
    string(name: 'ORGANIZATION_ID')
    string(name: 'API_TOKEN_CREDENTIAL_ID', defaultValue: 'SignPath.ExecutableProject.ApiToken')
    string(name: 'TRUSTED_BUILD_SYSTEM_TOKEN_CREDENTIAL_ID')
  }
  parameters {
    string(name: 'API_TOKEN_CREDENTIAL_ID', defaultValue: 'SignPath.ExecutableProject.ApiToken')    
  }
  stages {
    stage('Build') {
      steps {
        echo 'This would build the artifact in build-output/unsigned/executable.exe'
      }
    }
    stage('Archive') {
      steps {
        archiveArtifacts artifacts: "build-output/unsigned/executable.exe", fingerprint: true
      }
    }
    stage('Sign with SignPath') {
      steps {
        submitSigningRequest(
          apiUrl: "${params.API_URL}",
          organizationId: "${params.ORGANIZATION_ID}",
          apiTokenCredentialId: "${params.API_TOKEN_CREDENTIAL_ID}",
          trustedBuildSystemTokenCredentialId: "${params.TRUSTED_BUILD_SYSTEM_TOKEN_CREDENTIAL_ID}",
          projectSlug: "executable",
          signingPolicySlug: "test-signing",
          inputArtifactPath: "build-output/unsigned/executable.exe",
          outputArtifactPath: "build-output/signed/executable.exe",
          waitForCompletion: true,
          uploadAndDownloadRequestTimeoutInSeconds: 1200,
          waitForCompletionTimeoutInSeconds: 3000,
          parameters: [
            param1: "value1",
            param2: "value2"
          ]
        )
      }
    }
  }
}
